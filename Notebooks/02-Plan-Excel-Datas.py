# -*- coding: utf-8 -*-
"""Aula5_Pandas_Madu.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vMrI55lEb2E9DjgabF14JlK109L15ByU
"""

# Importando a Biblioteca Pandas
import pandas as pd

# Leitura das Planilhas Excel
df1 = pd.read_excel("/content/drive/MyDrive/datasets/Aracaju.xlsx")
df2 = pd.read_excel("/content/drive/MyDrive/datasets/Fortaleza.xlsx")
df3 = pd.read_excel("/content/drive/MyDrive/datasets/Natal.xlsx")
df4 = pd.read_excel("/content/drive/MyDrive/datasets/Recife.xlsx")
df5 = pd.read_excel("/content/drive/MyDrive/datasets/Salvador.xlsx")

df1

# Juntando todos os arquivos
df = pd.concat([df1,df2,df3,df4,df5])

df.head()

df.tail()

# Uma amostra
df.sample(5)

#Verificando o tipo de dado de cada coluna
df.dtypes

#Alterando o tipo de dado da coluna LojaID
df["LojaID"] = df["LojaID"].astype("object")

df.dtypes

df.head()

#Consultando linhas com valores faltantes
df.isnull().sum()

#Substituindo os valores nulos pela média
df["Vendas"].fillna(df["Vendas"].mean(), inplace=True)

df["Vendas"].mean()

# Consultando nulos ou na
df.isna().sum()

#Substituindo os valores nulos por zero
df["Vendas"].fillna(0, inplace=True)

#Apagando as linhas com valores nulos
df.dropna(inplace=True)

#Apagando as linhas com valores nulos com base apenas em 1 coluna
df.dropna(subset=["Vendas"], inplace=True)

#Removendo linhas que estejam com valores faltantes em todas as colunas
df.dropna(how="all", inplace=True)

df

#Criando a coluna de receita
df["Receita"] = df["Vendas"].mul(df["Qtde"])

df.head()

df["Receita/Vendas"] = df["Receita"] / df["Vendas"]

df.head()

#Retornando a maior receita
df["Receita"].max()

#Retornando a menor receita
df["Receita"].min()

# Listar as 3 maiores receitas - nlargest
df.nlargest(3, "Receita")

# Listar as 3 menores receitas - nsamllest
df.nsmallest(3, "Receita")

# Receitas por Cidade
df.groupby("Cidade")["Receita"].sum()

#Ordenando o conjunto de dados - Valor de Receita Descendente
df.sort_values("Receita", ascending=False).head(10)

"""Trabalhando com Datas"""

#Trasnformando a coluna de data em tipo inteiro
df["Data"] = df["Data"].astype("int64")

#Verificando o tipo de dado de cada coluna
df.dtypes

#Transformando coluna de data em data
df["Data"] = pd.to_datetime(df["Data"])

df.dtypes

#Agrupamento por ano - Receitas anuais
df.groupby(df["Data"].dt.year)["Receita"].sum()

#Criando uma nova coluna com o ano
df["Ano_Venda"] = df["Data"].dt.year

#Extraindo o mês e o dia
df["mes_venda"], df["dia_venda"] = (df["Data"].dt.month, df["Data"].dt.day)

df.sample(5)

#Retornando a data mais antiga
df["Data"].min()

#Retornando a data mais recente
df["Data"].max()

#Calculando a diferença de dias
df["diferenca_dias"] = df["Data"] - df["Data"].min()

df.sample(5)

#Criando a coluna de trimestre
df["trimestre_venda"] = df["Data"].dt.quarter

df.sample(25)

#Filtrando as vendas de 2019 do mês de março
vendas_marco_19 = df.loc[(df["Data"].dt.year == 2019) & (df["Data"].dt.month == 3)]

vendas_marco_19.sample(10)

"""Visualização de dados"""

# Contagem de linhas por loja - descendent order
df["LojaID"].value_counts(ascending=False)

#Gráfico de barras Vertical (descendente)
df["LojaID"].value_counts(ascending=False).plot.bar()

#Gráfico de barras horizontais
df["LojaID"].value_counts().plot.barh()

#Gráfico de Pizza - Receitas por Ano
df.groupby(df["Data"].dt.year)["Receita"].sum().plot.pie()

#Total vendas por cidade
df["Cidade"].value_counts()

#Adicionando um título e alterando o nome dos eixos
import matplotlib.pyplot as plt
df["Cidade"].value_counts().plot.bar(title="Total vendas por Cidade")
plt.xlabel("Cidade")
plt.ylabel("Total Vendas");

#Alterando a cor
df["Cidade"].value_counts(ascending=True).plot.bar(title="Total vendas por Cidade", color="green")
plt.xlabel("Cidade")
plt.ylabel("Total Vendas");

#Alterando o estilo
plt.style.use("ggplot")

df.groupby(df["mes_venda"])["Qtde"].sum().plot(title = "Total Produtos vendidos x mês")
plt.xlabel("Mês")
plt.ylabel("Total Produtos Vendidos")
plt.legend();

df.groupby(df["mes_venda"])["Qtde"].sum()

#Selecionando apenas as vendas de 2019
df_2019 = df[df["Ano_Venda"] == 2019]

df_2019.groupby(df_2019["mes_venda"])["Qtde"].sum()

#Total produtos vendidos por mês em 2019
df_2019.groupby(df_2019["mes_venda"])["Qtde"].sum().plot(marker = "o")
plt.xlabel("Mês")
plt.ylabel("Total Produtos Vendidos")
plt.legend();

#Hisograma
plt.hist(df["Qtde"], color="orangered");

# Gráfico de Dispersão
plt.scatter(x=df_2019["dia_venda"], y = df_2019["Receita"]);

#Salvando em png
df_2019.groupby(df_2019["mes_venda"])["Qtde"].sum().plot(marker = "v")
plt.title("Quantidade de produtos vendidos x mês")
plt.xlabel("Mês")
plt.ylabel("Total Produtos Vendidos");
plt.legend()
plt.savefig("grafico QTDE x MES.png")

